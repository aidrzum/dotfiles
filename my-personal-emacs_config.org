#+title: emacs_config
#+AUTHOR: rdia
#+PROPERTY: header-args :tangle config.el

* TABLE OF CONTENTS :toc:
- [[#beacon][BEACON]]
- [[#font-settings][Font Settings]]
- [[#info-settings][Info Settings]]
- [[#org-bullet-list][Org Bullet List]]
- [[#neotree-toggle-setup][Neotree Toggle Setup]]
- [[#dired-config-setting][Dired Config Setting]]
  - [[#basic-dired-commands][Basic dired commands]]
  - [[#dired-commands-using-regex][Dired commands using regex]]
  - [[#file-permissions-and-ownership][File permissions and ownership]]
  - [[#making-deleted-files-go-to-trash-can][Making deleted files go to trash can]]
  - [[#enabling-icons-on-dired][Enabling icons on dired]]
- [[#peep-dired-setting][Peep Dired Setting]]
  - [[#peep-dired-activation][Peep Dired activation]]
  - [[#toggle-peep-dired-with-spc-d-p][Toggle peep-dired with spc-d-p]]
- [[#treemacs-setting][Treemacs Setting]]
  - [[#treemac-toggle-setting][Treemac toggle setting]]
- [[#theme-settings][Theme Settings]]
- [[#layout-management-for-no-shrink-effect][Layout management for no shrink effect]]
- [[#line-number-setting][Line number Setting]]
- [[#org-directory-setting][Org directory Setting]]
- [[#enable-the-relative-number-mode][Enable the relative number mode.]]
- [[#require-for-faster-loading][Require for faster loading.]]
- [[#emacs-dashboard-setup][Emacs-dashboard Setup.]]
  - [[#remove-basic-evil-input-and-cursors-from-dashboard][Remove basic evil input and cursors from dashboard]]
- [[#org-roam-setup][Org-roam Setup.]]
  - [[#multi-org-roam-mode][Multi org-roam mode]]
  - [[#org-roam-todo-configuration][Org-roam todo configuration]]
  - [[#setup-org-agenda-from-org-roam][Setup Org Agenda from Org Roam]]
  - [[#refreshing-org-roam-agenda][Refreshing org roam agenda]]
  - [[#org-mode-keybindings][Org-mode keybindings]]
  - [[#org-mode-ui-setup][Org-mode UI Setup]]

* BEACON
Never lose your cursor.  When you scroll, your cursor will shine!  This is a global minor-mode. Turn it on everywhere with:

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

* Font Settings
My Custom Font settings

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Agave Nerd Font" :size 12)
        doom-variable-pitch-font (font-spec :family "Agave Nerd Font" :size 12))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
* Info Settings

#+begin_src emacs-lisp
(setq user-full-name "aidr"
      user-mail-address "aidr****@gmail.com")
#+end_src

* Org Bullet List

#+begin_src emacs-lisp
(setq
    org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿" "◆")
)
(add-hook 'org-mode-hook 'org-bullets-mode)
#+end_src

* Neotree Toggle Setup
My Neotree Toggle Setup

#+begin_src emacs-lisp
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree"  "d n" #'neotree-dir)
#+end_src

* Dired Config Setting
** Basic dired commands

| COMMAND                | DESCRIPTION                                 | KEYBINDING |
|------------------------+---------------------------------------------+------------|
| dired-view-file        | /View file in dired/                          | SPC d v    |
| dired-up-directory     | /Go up in directory tree/                     | h          |
| dired-find-file        | /Go down in directory tree (or open if file)/ | l          | 
| dired-next-line        | Move down to next line                        | j          | 
| dired-previous-line    | Move up to previous line                      | k          |
| dired-mark             | Mark file at point                            | m          |
| dired-unmark           | Unmark file at point                          | u          |
| dired-do-copy          | Copy current file or marked files             | C          |
| dired-do-rename        | Rename current file or marked files           | R          |
| dired-hide-details     | Toggle detailed listings on/off               | (          |
| dired-git-info-mode    | Toggle git information on/off                 | )          |
| dired-create-directory | Create new empty directory                    | +          |
| dired-diff             | Compare file at point with another            | =          |
| dired-subtree-toggle   | Toggle viewing subtree at point               | TAB        |

** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | Mark files using regex     | % m        |
| dired-do-copy-regexp    | Copy files using regex     | % C        |
| dired-do-rename-regexp  | Rename files using regex   | % R        |
| dired-mark-files-regexp | Mark all files using regex | * %        |

** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | Change the group of marked files | g G        |
| dired-do-chmod  | Change the mode of marked files  | M          |
| dired-do-chown  | Change the owner of marked files | O          |
| dired-do-rename | Rename file or all marked files  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
 #+end_src

** Making deleted files go to trash can

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+end_src

** Enabling icons on dired

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-icon-mode)
(add-hook 'ibuffer-mode-hook 'all-the-icons-ibuffer-mode)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

* Peep Dired Setting
** Peep Dired activation

#+begin_src emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

** Toggle peep-dired with spc-d-p

 #+begin_src emacs-lisp
(map! :leader
:desc "Peep-dired image previews" "d p" #'peep-dired)
 #+end_src

* Treemacs Setting
** Treemac toggle setting

 #+begin_src emacs-lisp
(map! :leader
:desc "Treemacs toggle" "e" #'treemacs)
 #+end_src

* Theme Settings

#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

#+RESULTS:
: doom-nord

* Layout management for no shrink effect

#+begin_src emacs-lisp

(add-to-list 'default-frame-alist '(width . 30px ))  ; Width set to 80 characters
(add-to-list 'default-frame-alist '(height . 70px )) ; Height set to 24 lines

#+end_src

* Line number Setting

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

* Org directory Setting

#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-hide-emphasis-markers t)
#+end_src

* Enable the relative number mode.

#+begin_src emacs-lisp

(setq display-line-numbers-type 'relative)

#+end_src

* Require for faster loading.

#+begin_src emacs-lisp

(require 'org-agenda)
(require 'dired)
(setq scroll-margin 30)
(setq hscroll-margin 10)

#+end_src

* Emacs-dashboard Setup.
#+begin_src emacs-lisp

(require 'all-the-icons)
(require 'dashboard)
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))
      doom-fallback-buffer-name "*dashboard*")
(setq image-scaling-factor 1)

;; emacs-dashboard variables
(setq dashboard-banner-logo-title "Welcome to Nix Doom Emacs")
(setq dashboard-startup-banner "~/Pictures/doom-vapourwave.png")
(setq dashboard-icon-type 'all-the-icons)
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-set-navigator t)
(setq dashboard-items '())
(setq dashboard-center-content t)
(setq dashboard-footer-messages '("Here to do customizing, or actual work?"
                                  "M-x insert-inspiring-message"
                                  "My software never has bugs. It just develops random features."
                                  "Dad, what are clouds made of? Linux servers, mostly."
                                  "There is no place like ~"
                                  "~ sweet ~"
                                  "sudo chown -R us ./allyourbase"
                                  "I’ll tell you a DNS joke but it could take 24 hours for everyone to get it."
                                  "I'd tell you a UDP joke, but you might not get it."
                                  "I'll tell you a TCP joke. Do you want to hear it?"))
#+end_src

** Remove basic evil input and cursors from dashboard

#+begin_src emacs-lisp

(defun disable-cursor()
  (setq-local evil-normal-state-cursor '(bar . 0))
  (hl-line-mode -1)
  )
(add-hook 'dashboard-mode-hook 'disable-cursor)
(evil-define-key 'normal dashboard-mode-map
  "j" 'evil-normal-state
  "k" 'evil-normal-state
  "h" 'evil-normal-state
  "l" 'evil-normal-state)
(setq dashboard-navigator-buttons
      `(;; line1
        ( (,"Roam" "" "" (lambda (&rest _)) 'org-formula)
          (,(all-the-icons-octicon "globe" :height 1.0 :v-adjust 0.0)
           "Notes overview" "" (lambda (&rest _) (org-roam-default-overview)) 'org-formula)
          (,(all-the-icons-fileicon "org" :height 1.0 :v-adjust 0.0)
           "Switch roam db" "" (lambda (&rest _) (org-roam-switch-db)) 'org-formula)
          )
        ;; line 2
        ( (,"Git" "" "" (lambda (&rest _)) 'diredfl-exec-priv)
          (,(all-the-icons-octicon "mark-github" :height 1.0 :v-adjust 0.0)
           "GitHub" "" (lambda (&rest _) (browse-url "https://github.com/aidrzum")) 'diredfl-exec-priv)
          (,(all-the-icons-faicon "gitlab" :height 1.0 :v-adjust 0.0)
           "GitLab" "" (lambda (&rest _) (browse-url "https://gitlab.com/aidrzum")) 'diredfl-exec-priv)
          (,(all-the-icons-faicon "coffee" :height 1.0 :v-adjust 0.0)
           "Gitea" "" (lambda (&rest _) (browse-url my-gitea-domain)) 'diredfl-exec-priv)
          (,(all-the-icons-octicon "triangle-up" :height 1.2 :v-adjust -0.1)
           "Codeberg" "" (lambda (&rest _) (browse-url "https://codeberg.org/aidrzum")) 'diredfl-exec-priv)
          )
        ;; line 3
        ( (,"Agenda" "" "" (lambda (&rest _)) 'dired-warning)
          (,(all-the-icons-octicon "checklist" :height 1.0 :v-adjust 0.0)
           "Agenda todos" "" (lambda (&rest _) (org-agenda-list)) 'dired-warning)
          (,(all-the-icons-octicon "calendar" :height 1.0 :v-adjust 0.0)
           "Agenda calendar" "" (lambda (&rest _) (cfw:open-org-calendar)) 'dired-warning)
          )
        ;; line 4
        ( (,"Config" "" "" (lambda (&rest _)) 'dired-mark)
          (,(all-the-icons-faicon "cogs" :height 1.0 :v-adjust 0.0)
           "System config" "" (lambda (&rest _) (projectile-switch-project-by-name "~/.dotfiles" t)) 'dired-mark)
          (,(all-the-icons-material "help" :height 1.0 :v-adjust -0.2)
           "Doom documentation" "" (lambda (&rest _) (doom/help)) 'dired-mark)
          )))

(setq dashboard-footer-icon
      (all-the-icons-faicon "list-alt"
                            :height 1.0
                            :v-adjust -0.15
                            :face 'font-lock-keyword-face))
(dashboard-setup-startup-hook)

(map! :leader :desc "Open dashboard" "b b" #'dashboard-refresh-buffer)

(setq scroll-conservatively 101)
#+end_src

* Org-roam Setup.

#+begin_src emacs-lisp

(require 'org-roam)
(require 'org-roam-dailies)
(setq user-default-roam-dir "~/Org/")

(setq org-roam-directory (concat "~/Org/" user-default-roam-dir "/Notes")
      org-roam-db-location (concat "~/Org/" user-default-roam-dir "/Notes/org-roam.db"))

(setq org-roam-node-display-template
      "${title:65}📝${tags:*}")

(org-roam-db-autosync-mode)

(setq mode-line-misc-info '((which-function-mode
  (which-func-mode
   ("" which-func-format " ")))
 ("" so-long-mode-line-info)
 (global-mode-string
  ("" global-mode-string))
 " "
 org-roam-db-choice)
)

(setq org-roam-list-files-commands '(rg))

#+end_src
** Multi org-roam mode

#+begin_src emacs-lisp

(setq full-org-roam-db-list nil)

(setq full-org-roam-db-list (directory-files "~/Org" t "\\.[p,s]$"))
(dolist (item full-org-roam-db-list)
  (setq full-org-roam-db-list
        (append (directory-files item t "\\.[p,s]$") full-org-roam-db-list)))

(setq org-roam-db-choice user-default-roam-dir)
(setq full-org-roam-db-list-pretty (list))
(dolist (item full-org-roam-db-list)
  (setq full-org-roam-db-list-pretty
       (append (list
             (replace-regexp-in-string (concat "\\/home\\/" user-username "\\/Org\\/") "" item)) full-org-roam-db-list-pretty)))

(defun org-roam-open-dashboard ()
  "Open ${org-roam-directory}/dashboard.org (I use this naming convention to create dashboards for each of my org roam maps)"
  (interactive)
  (if (org-roam-node-from-title-or-alias "Overview")
      (org-roam-node-open (org-roam-node-from-title-or-alias "Overview"))
      (dired org-roam-directory))
)

(defun org-roam-open-inbox ()
  "Open ${org-roam-directory}/dashboard.org (I use this naming convention to create dashboards for each of my org roam maps)"
  (interactive)
  (if (org-roam-node-from-title-or-alias "Inbox")
      (org-roam-node-open (org-roam-node-from-title-or-alias "Inbox"))
      (message "No inbox found, capture something with M-x org-roam-capture-inbox"))
)

(defun org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-from-title-or-alias "Inbox")
                     :templates '(("i" "inbox" plain "* %?"
                                  :if-new (file+head "%<%Y%m%d%H%M%S>-inbox.org" "#+title: Inbox\n")))))

(defun org-roam-switch-db (&optional arg silent)
  "Switch to a different org-roam database, arg"
  (interactive)
  (when (not arg)
  (setq full-org-roam-db-list nil)
;; Multi Org-roam mode
  (setq full-org-roam-db-list (directory-files "~/Org" t "\\.[p,s]$"))
  (dolist (item full-org-roam-db-list)
    (setq full-org-roam-db-list
        (append (directory-files item t "\\.[p,s]$") full-org-roam-db-list)))

  (setq full-org-roam-db-list-pretty (list))
  (dolist (item full-org-roam-db-list)
    (setq full-org-roam-db-list-pretty
        (append (list
                 (replace-regexp-in-string (concat "\\/home\\/" l33tboi "\\/Org\\/") "" item)) full-org-roam-db-list-pretty)))

  (setq org-roam-db-choice (completing-read "Select org roam database: "
                          full-org-roam-db-list-pretty nil t)))
  (when arg
    (setq org-roam-db-choice arg))

      (setq org-roam-directory (file-truename (concat "~/Org/" org-roam-db-choice "/Notes"))
            org-roam-db-location (file-truename (concat "~/Org/" org-roam-db-choice "/Notes/org-roam.db"))
            org-directory (file-truename (concat "~/Org/" org-roam-db-choice "/Notes")))
  (when (not silent)
  (org-roam-open-dashboard))

  (org-roam-db-sync)

  (message (concat "Switched to " org-roam-db-choice " org-roam database!")))

(defun org-roam-default-overview ()
  (interactive)
  (org-roam-switch-db user-default-roam-dir))

(defun org-roam-switch-db-id-open (arg ID &optional switchpersist)
  "Switch to another org-roam db and visit file with id arg"
  "If switchpersist is non-nil, stay in the new org-roam db after visiting file"
  (interactive)
  (setq prev-org-roam-db-choice org-roam-db-choice)
  (org-roam-switch-db arg 1)
  (org-roam-id-open ID)
  (when (not switchpersist)
    (org-roam-switch-db prev-org-roam-db-choice 1)))
#+end_src

** Org-roam todo configuration

#+begin_src emacs-lisp

(defun text-in-buffer-p (TEXT)
(save-excursion (goto-char (point-min)) (search-forward TEXT nil t)))

(defun apply-old-todos-tag-maybe (&optional FILE)
   (interactive)
   (if (stringp FILE)
   (setq the-daily-node-filename FILE)
   (setq the-daily-node-filename buffer-file-name))
   (if (org-roam-dailies--daily-note-p the-daily-node-filename)
    (if (<= (nth 2 (org-roam-dailies-calendar--file-to-date the-daily-node-filename)) (nth 2 org-agenda-current-date))
      (if (<= (nth 1 (org-roam-dailies-calendar--file-to-date the-daily-node-filename)) (nth 1 org-agenda-current-date))
        (if (<= (nth 0 (org-roam-dailies-calendar--file-to-date the-daily-node-filename)) (nth 0 org-agenda-current-date))
          (funcall (lambda ()
            (with-current-buffer (get-file-buffer the-daily-node-filename) (org-roam-tag-add '("old-todos")))
            (with-current-buffer (get-file-buffer the-daily-node-filename) (org-roam-tag-remove '("todos")))
            )
          )
        )
      )
    )
  )
)

(defun apply-old-todos-tag-maybe-and-save (FILE)
  (interactive)
  (find-file-noselect FILE)
  (apply-old-todos-tag-maybe FILE)
  (with-current-buffer (get-file-buffer the-daily-node-filename) (save-buffer))
  (with-current-buffer (get-file-buffer the-daily-node-filename) (kill-buffer))
)

(defun org-current-buffer-has-todos ()
  "Return non-nil if current buffer has any todo entry."

  (org-element-map                          ; (2)
       (org-element-parse-buffer 'headline) ; (1)
       'headline
     (lambda (h)
       (eq (org-element-property :todo-type h)
           'todo))
     nil 'first-match))                     ; (3)

(defun org-has-recent-timestamps (OLD-DAYS)
  "Return non-nil only if current buffer has entries with timestamps
   more recent than OLD-DAYS days"
  (interactive)
  (if (org-element-map (org-element-parse-buffer) 'timestamp
    (lambda (h)
      (org-element-property :raw-value h)))
      (org-element-map                          ; (2)
         (org-element-parse-buffer) ; (1)
          'timestamp
         (lambda (h)
           (time-less-p (time-subtract (current-time) (* 60 60 24 OLD-DAYS)) (date-to-time (org-element-property :raw-value h))))
         nil 'first-match) nil))

(setq org-timestamps-days-for-old 21)

; This has a bug where it won't sync a new agenda file
; if I'm editing an org roam node file while set to another
; org roam db
(defun add-todos-tag-on-save-org-mode-file()
  (interactive)
  (when (string= (message "%s" major-mode) "org-mode")
    (if (org-roam-node-p (org-roam-node-at-point))
    (funcall (lambda()
      (if (or (org-current-buffer-has-todos) (org-has-recent-timestamps org-timestamps-days-for-old))
        (org-roam-tag-add '("todos"))
        (org-roam-tag-remove '("todos"))
      )
      (apply-old-todos-tag-maybe)
     )
    )
  )
 )
)

(add-hook 'before-save-hook 'add-todos-tag-on-save-org-mode-file)


#+end_src

** Setup Org Agenda from Org Roam


#+begin_src emacs-lisp

(defun org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun org-roam-dailies-apply-old-todos-tags-to-all ()
;  (dolist (daily-node org-roam-dailies-files)
;           (apply-old-todos-tag-maybe-and-save daily-node)
;  )
  (setq num 0)
  (while (< num (list-length (org-roam-list-notes-by-tag "todos")))
    (apply-old-todos-tag-maybe-and-save (nth num (org-roam-list-notes-by-tag "todos")))
  (setq num (1+ num))
  )
)
#+end_src

** Refreshing org roam agenda

#+begin_src emacs-lisp

(defun org-roam-refresh-agenda-list ()
  (interactive)
  (setq prev-org-roam-db-choice org-roam-db-choice)
  (setq org-agenda-files '())
  (setq org-id-files '())
  (setq org-roam-directory (file-truename "~/Org")
        org-roam-db-location (file-truename "~/Org/org-roam.db")
        org-directory (file-truename "~/Org/"))
  (org-roam-db-sync)
  (setq org-agenda-files (org-roam-list-notes-by-tag "todos"))
  (setq org-id-files (org-roam-list-files))
  (setq org-agenda-files (-uniq org-agenda-files))
  (org-roam-switch-db prev-org-roam-db-choice 1)
)

;; Build agenda only when org agenda first opened for session
(setq org-roam-agenda-initialized nil)
(defun org-roam-refresh-agenda-list-init ()
  (if (not org-roam-agenda-initialized)
    (funcall
      (lambda ()
        (org-roam-refresh-agenda-list)
        (setq org-roam-agenda-initialized t)
      )
    )
  )
)
(add-hook 'org-agenda-mode-hook 'org-roam-refresh-agenda-list-init)

(map! :leader
      :prefix ("o a")

      :desc "Refresh org agenda from roam dbs"
      "r" 'org-roam-refresh-agenda-list)

#+end_src

** Org-mode keybindings

#+begin_src emacs-lisp

(map! :leader
      :prefix ("N" . "org-roam notes")

      :desc "Capture new roam node"
      "c" 'org-roam-capture

      :desc "Open org roam inbox"
      "I o" 'org-roam-open-inbox

      :desc "Capture stuff in inbox"
      "I c" 'org-roam-capture-inbox

      :desc "Insert roam node link at point"
      "i" 'org-roam-node-insert

      :desc "Find roam node"
      "." 'org-roam-node-find

      :desc "Switch org-roam database"
      "s" 'org-roam-switch-db

      :desc "Update current org-roam database"
      "u" 'org-roam-db-sync

      :desc "Re-zoom on current node in org-roam-ui"
      "z" 'org-roam-ui-node-zoom

      :desc "Visualize org-roam database with org-roam-ui"
      "O" 'org-roam-default-overview

      :desc "Visualize org-roam database with org-roam-ui"
      "o" 'org-roam-open-dashboard)

#+end_src

** Org-mode UI Setup

#+begin_src emacs-lisp

(setq org-roam-ui-browser-function 'browse-url) ; wayland

(defun open-org-roam-ui ()
  (interactive)
  (+evil/window-vsplit-and-follow)
  (org-roam-ui-open)
  (evil-window-left 1))

(defun kill-org-roam-ui ()
  (interactive)
;;  (delete-window (get-buffer-window "ORUI" t)) ; xorg
;;  (kill-buffer "ORUI") ; xorg
  (kill-buffer "*httpd*")
)

; xorg
;;(map! :leader
;;      :prefix ("N" . "org-roam notes")
;;      :desc "Visualize org-roam database with org-roam-ui"
;;      "v" 'open-org-roam-ui)

; wayland
(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Visualize org-roam database with org-roam-ui"
      "v" 'org-roam-ui-open)

(map! :leader
      :prefix ("N" . "org-roam notes")
      :desc "Kill all org roam ui buffers"
      "V" 'kill-org-roam-ui)

#+end_src
